import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.c3fd347f.js";const h=JSON.parse('{"title":"第五集 设计稿还原","description":"","frontmatter":{},"headers":[],"relativePath":"uniapp/app/develope/restorate-design-draft.md","filePath":"uniapp/app/develope/restorate-design-draft.md","lastUpdated":1707147609000}'),p={name:"uniapp/app/develope/restorate-design-draft.md"},e=l(`<h1 id="第五集-设计稿还原" tabindex="-1">第五集 设计稿还原 <a class="header-anchor" href="#第五集-设计稿还原" aria-label="Permalink to &quot;第五集 设计稿还原&quot;">​</a></h1><p>  在本文中，我们将详细描述使用 Uniapp 开发 App 页面还原设计稿的具体步骤和注意事项，并介绍如何使用 SCSS 来提高开发效率。</p><h2 id="_1-设计稿还原前的准备工作" tabindex="-1">1. 设计稿还原前的准备工作 <a class="header-anchor" href="#_1-设计稿还原前的准备工作" aria-label="Permalink to &quot;1. 设计稿还原前的准备工作&quot;">​</a></h2><p>  在开始开发之前，确保你已经收到并理解了设计稿。设计稿是你还原页面的依据，包含了页面的样式、布局、色彩等细节。在与设计师和产品经理充分沟通后，开始进行设计稿还原。<br>   开发App页面时，只需要将设计稿尺寸调整为 750px，并使用<code>uni-app</code>提供的<code>rpx</code>单位，并且使用<code>Flex</code>布局，即可轻松还原设计稿，并实现app端多机型的适配功能。</p><ul><li>rpx单位 <ul><li>rpx 是相对于基准宽度的单位，可以根据屏幕宽度进行自适应。uni-app 规定屏幕基准宽度 750rpx。</li><li>举例说明： <ul><li>若设计稿宽度为 750px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 750，结果为：100rpx。</li><li>若设计稿宽度为 640px，元素 A 在设计稿上的宽度为 100px，那么元素 A 在 uni-app 里面的宽度应该设为：750 * 100 / 640，结果为：117rpx。</li><li>若设计稿宽度为 375px，元素 B 在设计稿上的宽度为 200px，那么元素 B 在 uni-app 里面的宽度应该设为：750 * 200 / 375，结果为：400rpx。</li></ul></li></ul></li></ul><h2 id="_2-使用-uniapp-创建页面" tabindex="-1">2. 使用 Uniapp 创建页面 <a class="header-anchor" href="#_2-使用-uniapp-创建页面" aria-label="Permalink to &quot;2. 使用 Uniapp 创建页面&quot;">​</a></h2><p>uni-app项目中，一个页面就是一个符合Vue SFC规范的.vue文件或.nvue文件。</p><p>.vue页面和.nvue页面，均全平台支持，差异在于当uni-app发行到App平台时，.vue文件会使用webview进行渲染，.nvue会使用原生进行渲染。</p><p>建议首页使用.nvue，其他页面看情况选择，有性能需求则使用.nvue,没有使用.vue即可。</p><h2 id="_3-还原页面样式" tabindex="-1">3. 还原页面样式 <a class="header-anchor" href="#_3-还原页面样式" aria-label="Permalink to &quot;3. 还原页面样式&quot;">​</a></h2><h3 id="_3-1-使用设计稿的尺寸和颜色变量" tabindex="-1">3.1 使用设计稿的尺寸和颜色变量 <a class="header-anchor" href="#_3-1-使用设计稿的尺寸和颜色变量" aria-label="Permalink to &quot;3.1 使用设计稿的尺寸和颜色变量&quot;">​</a></h3><p>  在开始编写样式前，查看设计稿中的尺寸和颜色，可以将它们抽象为变量。参考<code>uni.scss</code>文件,首先，在项目中创建一个名为 variables.scss 的文件，用于存放设计稿中的尺寸和颜色变量。例如：</p><div class="language-scss vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#FFAB70;">$primary-color</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">#007bff</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#E36209;">$primary-color</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">#007bff</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，在需要使用这些尺寸和颜色的样式文件中，通过 @import 导入 variables.scss 文件到App.vue中可以全局使用：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scss&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* #ifndef APP-NVUE */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/static/css/iconfont.css&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* #endif */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">@import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/static/css/variables.scss&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">style</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">style</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">lang</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scss&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* #ifndef APP-NVUE */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/static/css/iconfont.css&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* #endif */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">@import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/static/css/variables.scss&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">style</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后在样式中使用这些变量，这样在后续的修改和维护中，只需要修改变量的值，样式会自动更新。</p><h3 id="_3-3-使用样式类名命名规范" tabindex="-1">3.3 使用样式类名命名规范 <a class="header-anchor" href="#_3-3-使用样式类名命名规范" aria-label="Permalink to &quot;3.3 使用样式类名命名规范&quot;">​</a></h3><p>在编写样式时，建议使用类名命名规范，保持代码的整洁和易读。</p><ul><li>class、id 都需小写</li><li>命名使用英文，禁止使用特殊字符</li><li>样式名不能包含ad、guanggao、ads、gg是广告含义的关键词，避免元素被网页拓展、插件屏蔽</li><li>名称间隔使用-符号</li><li>涉及数据、交互等需要联调的部分，禁止通过 id 选择器定义样式，以免开发过程中 id 名变化，引起页局错乱</li></ul><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;header&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;header-logo&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;header-nav&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header-logo&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;header-nav&quot;</span><span style="color:#24292E;">&gt;&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-4-注意适配不同屏幕尺寸" tabindex="-1">3.4 注意适配不同屏幕尺寸 <a class="header-anchor" href="#_3-4-注意适配不同屏幕尺寸" aria-label="Permalink to &quot;3.4 注意适配不同屏幕尺寸&quot;">​</a></h3><p>  在还原设计稿时，需要考虑页面在不同屏幕尺寸下的适配。Uniapp 支持响应式布局，你可以使用 Flexbox 或 Grid 布局来实现页面的自适应。</p><h2 id="_4-nvue页面注意事项" tabindex="-1">4. nvue页面注意事项 <a class="header-anchor" href="#_4-nvue页面注意事项" aria-label="Permalink to &quot;4. nvue页面注意事项&quot;">​</a></h2><ol><li>nvue页面的样式单位支持px，rpx，但不支持百分比。</li><li>不支持rem，vh，vw单位。</li><li>不支持使用@import导入外部样式文件。</li><li>不能使用scss，sass，less等预处理器。</li><li>nvue页面的样式只支持类选择器（.class），不支持使用其他选择器（如 #id、element）。</li><li>nvue 页面的布局排列方向默认为竖排（column），如需改变布局方向，可以在 manifest.json -&gt; app-plus -&gt; nvue -&gt; flex-direction 节点下修改，仅在 uni-app 模式下生效。<div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;app-plus&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;nvue&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#79B8FF;">&quot;flex-direction&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;row&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;app-plus&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;nvue&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#005CC5;">&quot;flex-direction&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;row&quot;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>更多nvue使用css限制请参考文末的参考文档。</li></ol><h2 id="_5-rpx单位注意事项" tabindex="-1">5. rpx单位注意事项 <a class="header-anchor" href="#_5-rpx单位注意事项" aria-label="Permalink to &quot;5. rpx单位注意事项&quot;">​</a></h2><ol><li>注意 rpx 是和宽度相关的单位，屏幕越宽，该值实际像素越大。如不想根据屏幕宽度缩放，则应该使用 px 单位</li><li>如果开发者在字体或高度中也使用了 rpx ，那么需注意这样的写法意味着随着屏幕变宽，字体会变大、高度会变大。如果你需要固定高度，则应该使用 px 。</li><li>rpx 不支持动态横竖屏切换计算，使用 rpx 建议锁定屏幕方向</li><li>App 端，在 pages.json 里的 titleNView 或页面里写的 plus api 中涉及的单位，只支持 px，不支持 rpx。</li><li>如果设计稿不是 750px，可以使用HBuilderX 提供了自动换算的工具。</li></ol><h2 id="_6-参考文档" tabindex="-1">6. 参考文档 <a class="header-anchor" href="#_6-参考文档" aria-label="Permalink to &quot;6. 参考文档&quot;">​</a></h2><ul><li><a href="https://ask.dcloud.net.cn/article/35445" target="_blank" rel="noreferrer">HBuilderX中自动转换px为upx</a></li><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noreferrer">阮一峰的 flex 教程</a></li><li><a href="https://uniapp.dcloud.net.cn/tutorial/nvue-css.html" target="_blank" rel="noreferrer">nvue中使用css</a></li></ul>`,28),o=[e];function t(r,c,i,E,d,u){return a(),n("div",null,o)}const b=s(p,[["render",t]]);export{h as __pageData,b as default};
