import{_ as e,o as a,c as s,Q as n}from"./chunks/framework.c3fd347f.js";const E=JSON.parse('{"title":"sentry在项目中的落地参考文章","description":"","frontmatter":{},"headers":[],"relativePath":"sentry/links.md","filePath":"sentry/links.md","lastUpdated":1707147609000}'),l={name:"sentry/links.md"},r=n(`<h1 id="sentry在项目中的落地参考文章" tabindex="-1">sentry在项目中的落地参考文章 <a class="header-anchor" href="#sentry在项目中的落地参考文章" aria-label="Permalink to &quot;sentry在项目中的落地参考文章&quot;">​</a></h1><ul><li><a href="https://juejin.cn/post/7195496297150709821" target="_blank" rel="noreferrer">字节前端监控实践</a></li><li><a href="https://mp.weixin.qq.com/s/-eEMSn2WpDiMbNSBgY3-pg" target="_blank" rel="noreferrer">前端监控系列1｜ 字节的前端监控 SDK 是怎样设计的</a></li><li><a href="https://www.cnblogs.com/hacker-linner/p/15237007.html" target="_blank" rel="noreferrer">Sentry For Vue 完整接入详解(2021 Sentry v21.8.x)前方高能预警！三万字，慎入！ </a></li><li><a href="https://www.cnblogs.com/hacker-linner/p/15329189.html" target="_blank" rel="noreferrer">Sentry 监控 - Search 搜索查询实战</a></li><li>云效api: <a href="https://next.api.aliyun.com/document/devops/2021-06-25/GetFileLastCommit" target="_blank" rel="noreferrer">云效api)</a></li><li><a href="https://mp.weixin.qq.com/s/ajq-eGu4DBLbHXEm2HGV8Q" target="_blank" rel="noreferrer">一文搞懂得物前端监控</a><ul><li><a href="https://zhuanlan.zhihu.com/p/112962974" target="_blank" rel="noreferrer">转转商业前端错误监控系统(Sentry)策略升级</a></li></ul></li><li><a href="https://mp.weixin.qq.com/s/QZQ8-48MD3zgGmSrr_oWwQ" target="_blank" rel="noreferrer">Sentry Web 性能监控</a></li></ul><hr><ul><li><a href="https://mp.weixin.qq.com/s/OoA8Gmzygm9QdgC2ykik0A" target="_blank" rel="noreferrer">前端监控：打造极致用户体验的利器</a></li><li><a href="https://mp.weixin.qq.com/s/rl6QrHFnR9CCTKSZiMghVA" target="_blank" rel="noreferrer">基于Sentry高效治理前端异常</a></li><li><a href="https://developer.aliyun.com/article/952870" target="_blank" rel="noreferrer">Sentry 后端监控 - 最佳实践(官方教程)</a></li><li><a href="https://github.com/xy-sea/blog/blob/main/markdown/%E4%BB%8E0%E5%88%B01%E6%90%AD%E5%BB%BA%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7%E5%B9%B3%E5%8F%B0%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87%E7%9A%84%E4%BA%AE%E7%82%B9%E9%A1%B9%E7%9B%AE.md" target="_blank" rel="noreferrer">从0到1搭建自研前端监控平台</a></li></ul><h2 id="git-blame" tabindex="-1">git blame <a class="header-anchor" href="#git-blame" aria-label="Permalink to &quot;git blame&quot;">​</a></h2><p>使用 git blame 查看每行代码的最后修改者及其提交信息的步骤如下：</p><p>打开终端：在你的计算机上打开命令行工具。</p><p>导航到项目目录：使用 cd 命令进入到包含你想检查的文件的 Git 仓库目录。</p><p>例如：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">path/to/your/project</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">path/to/your/project</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>运行 git blame：使用 git blame 命令 followed by the file name。</p><p>例如，查看名为 example.js 的文件：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blame</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">example.js</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blame</span><span style="color:#24292E;"> </span><span style="color:#032F62;">example.js</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会输出 example.js 文件的每一行，以及对该行进行最后修改的提交信息，包括提交者的名字和邮箱、提交的时间戳和提交信息。</p><p>例如，输出可能会是这样的：</p><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">a1b2c3d4 (John Doe 2023-01-01) int </span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> = 1; // 初始化变量a</span></span>
<span class="line"><span style="color:#E1E4E8;">e5f6g7h8 (Jane Smith 2023-02-02) </span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">= 2;  // 增加变量a的值</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">a1b2c3d4 (John Doe 2023-01-01) int </span><span style="color:#22863A;">a</span><span style="color:#24292E;"> = 1; // 初始化变量a</span></span>
<span class="line"><span style="color:#24292E;">e5f6g7h8 (Jane Smith 2023-02-02) </span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;">= 2;  // 增加变量a的值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这意味着第一行代码是由 John Doe 在 2023 年 1 月 1 日提交的，而第二行代码是由 Jane Smith 在 2023 年 2 月 2 日提交的。</p>`,17),t=[r];function p(o,i,c,h,d,m){return a(),s("div",null,t)}const y=e(l,[["render",p]]);export{E as __pageData,y as default};
